# -*- coding: utf-8 -*-
"""python_basic_operations

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nTQLCgmQ4Hb3EGTIXIKKOsYP_j04_yak
"""

# Part 1: Variables and Basic Arithmetic Operations
# In Python, variables are used to store data.

# Define an initial velocity (v0) and acceleration due to gravity (g)
v0 = 5  # Initial velocity in meters per second (int)
g = 9.81  # Acceleration due to gravity in m/s^2 (float)

# Define a time variable (t) in seconds
t = 0.6  # Time in seconds

# Calculate the displacement (y) using the kinematic equation
# y = v0 * t - 0.5 * g * t^2
y = v0 * t - 0.5 * g * t**2  # Displacement after time t in meters

# Print the result of the displacement calculation
print(f"Displacement after {t} seconds: {y:.2f} meters")

# Part 2: Working with the math module
# Importing the math module allows access to advanced mathematical functions like sin, cos, pi, etc.
import math as m

# Example 1: Calculate the sine of pi
sin_value = m.sin(m.pi)  # Sine of pi (should be close to 0)
print(f"sin(pi) = {sin_value:.2f}")

# Example 2: Calculate the square root of 16
sqrt_value = m.sqrt(16)  # Square root of 16
print(f"Square root of 16 = {sqrt_value:.2f}")

# Part 3: Loops and Lists
# Lists store multiple items in a single variable. You can iterate over them using loops.

# Create a list of temperatures in Celsius
temperatures = [-10, -5, 0, 5, 10, 15, 20, 25, 30]
print(f"List of temperatures: {temperatures}")

# Loop through the list of temperatures and print each temperature
print("Temperature readings:")
for temp in temperatures:
    print(f"{temp}°C")

# Create a list with mixed data types (integers, strings, etc.)
mixed_list = ["hi", "hello", 3, 4]
print(f"Original mixed list: {mixed_list}")

# Access the second element in the list (remember, indexing starts from 0)
print(f"Second element in the list: {mixed_list[1]}")

# Append a new item to the list
mixed_list.append(0)
print(f"List after appending 0: {mixed_list}")

# Add more items to the list
mixed_list = mixed_list + [40, 50]
print(f"Updated list: {mixed_list}")

# Part 4: Functions
# Functions are reusable blocks of code that can take inputs and return outputs.

# Example: A simple function that adds 1 to the input number
def add_one(n):
    result = n + 1
    print(f"Inside function: {result}")
    return result

# Call the function and store the result
result = add_one(5)
print(f"Result after calling add_one(5): {result}")

# Another example: A function to calculate velocity and displacement at a given time
def kinematic_motion(t, v0):
    g = 9.81  # acceleration due to gravity (constant)
    v_final = v0 - g * t  # Final velocity after time t
    displacement = v0 * t - 0.5 * g * t**2  # Displacement after time t
    return v_final, displacement

# Call the function with example values
final_velocity, displacement = kinematic_motion(10, 0)  # Time = 10 seconds, Initial velocity = 0
print(f"Final velocity: {final_velocity} m/s, Displacement: {displacement} meters")

# Part 5: Numerical Computation - Taylor Series Approximation
# This example approximates the sine function using its Taylor series expansion.

x = 1.2  # Value for which we want to calculate sin(x)
N = 25  # Number of terms in the series
sine_approx = x  # Initialize sum with the first term (x^1/1!)

# Alternate sign for the terms of the series
sign = 1.0
k = 1
while k < N:
    sign = -sign  # Alternate sign for each term
    k += 2  # Increase the power by 2 for each term in the series
    term = sign * x**k / m.factorial(k)  # Calculate the term in the series
    sine_approx += term  # Add the term to the approximation

print(f"sin({x}) ≈ {sine_approx:.15f} (using Taylor series with {N} terms)")

# Part 6: Numerical Integration - Simpson's Rule
# Simpson's Rule is used to approximate the value of an integral.

def simpson_integration(f, a, b, n=500):
    """
    Approximate the integral of a function f from a to b using Simpson's Rule.
    Arguments:
    f -- the function to integrate
    a, b -- limits of integration
    n -- number of intervals (default is 500)
    """
    h = (b - a) / n  # Step size
    sum1 = sum(f(a + (2 * i - 1) * h) for i in range(1, int(n / 2 + 1)))  # Sum for odd-indexed terms
    sum2 = sum(f(a + 2 * i * h) for i in range(1, int(n / 2)))  # Sum for even-indexed terms
    integral = (b - a) / (3 * n) * (f(a) + f(b) + 4 * sum1 + 2 * sum2)  # Simpson's Rule formula
    return integral

# Define the function to integrate: f(x) = (3/2) * sin(x)^3
def integrand(x):
    return (3. / 2) * m.sin(x)**3

# Test the Simpson's rule integration with different values of n
print("Integral of 1.5 * sin^3(x) from 0 to pi:")
for n in [2, 6, 12, 100, 500]:
    approx = simpson_integration(integrand, 0, m.pi, n)
    print(f"n={n}, Approximation={approx:.15f}")

# Part 7: Working with Numpy Arrays
import numpy as np

# Create a Numpy array of integers
array1 = np.array([1, 2, 4, 5], dtype='int32')
print(f"Array1: {array1}")

# Create an array with values from 0 to 10, with a step size of 0.5
arr2 = np.arange(0, 10, 0.5)
print(f"Array with step 0.5: {arr2}")

# Create a linearly spaced array from 0 to 100 with 1000 points
arr3 = np.linspace(0, 100, 1000)
print(f"Linearly spaced array: {arr3[:5]}... (first 5 elements)")

# Matrix operations: Calculate the determinant of a matrix
matrix = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])  # Identity matrix
determinant = np.linalg.det(matrix)  # Determinant of the matrix
print(f"Determinant of the matrix: {determinant:.2f}")

# Part 8: Generating Random Numbers
import random

random.seed(2)  # Set seed for reproducibility
random_numbers = ['%.2f' % random.random() for i in range(7)]  # Generate 7 random numbers
print(f"Random numbers: {random_numbers}")

# Part 9: Additional Examples of List Operations
# Create a new list and demonstrate various operations.
my_list = [10, 20, 30, 40, 50]
print(f"Original List: {my_list}")

# Remove the first element of the list
my_list.pop(0)
print(f"After popping the first element: {my_list}")

# Insert a new value at the second position
my_list.insert(1, 25)
print(f"After inserting 25 at index 1: {my_list}")

# Sort the list
my_list.sort()
print(f"Sorted list: {my_list}")

# Reverse the list
my_list.reverse()
print(f"Reversed list: {my_list}")

# Find the index of an element
index_of_40 = my_list.index(40)
print(f"Index of 40: {index_of_40}")

#Working with Dictionaries

# Create a dictionary with student names and their grades
students_grades = {
    "Alice": 85,
    "Bob": 92,
    "Charlie": 78,
    "David": 88,
    "Eva": 91
}

# Access a value by its key
print(f"Alice's grade: {students_grades['Alice']}")

# Add a new key-value pair
students_grades["Frank"] = 79
print("Updated dictionary:", students_grades)

# Loop through the dictionary
print("\nList of students and their grades:")
for student, grade in students_grades.items():
    print(f"{student}: {grade}")

# Check if a key exists in the dictionary
if "Bob" in students_grades:
    print("\nBob's grade is available!")
else:
    print("\nBob's grade is not available.")

# Remove a key-value pair
del students_grades["Charlie"]
print("Dictionary after removing Charlie:", students_grades)

#Exception Handling

# Example 1: Catching ZeroDivisionError
try:
    result = 10 / 0
except ZeroDivisionError:
    print("Error: Division by zero is not allowed!")

# Example 2: Catching ValueError
try:
    number = int("abc")  # This will raise a ValueError
except ValueError:
    print("Error: Invalid input. Cannot convert to an integer.")

# Example 3: Using finally
try:
    file = open("example.txt", "r")
    content = file.read()
    print(content)
except FileNotFoundError:
    print("Error: File not found!")
finally:
    print("\nThe 'finally' block always runs, whether an error occurred or not.")

#Simple Object-Oriented Programming (OOP)

# Define a class for a Car
class Car:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year
        self.speed = 0  # The car starts at 0 speed

    # Method to accelerate the car
    def accelerate(self):
        self.speed += 5
        print(f"The car accelerates. Speed is now {self.speed} km/h.")

    # Method to brake the car
    def brake(self):
        self.speed -= 5
        if self.speed < 0:
            self.speed = 0  # Speed can't go below 0
        print(f"The car slows down. Speed is now {self.speed} km/h.")

    # Method to display the car's information
    def display_info(self):
        print(f"Car Info: {self.year} {self.make} {self.model}, Speed: {self.speed} km/h")


# Create a Car object
my_car = Car("Toyota", "Corolla", 2020)

# Display car's information
my_car.display_info()

# Accelerate the car
my_car.accelerate()

# Brake the car
my_car.brake()

# Display the updated information
my_car.display_info()

#List Comprehension

# Example 1: Create a list of squares of numbers from 1 to 10
squares = [x**2 for x in range(1, 11)]
print("Squares of numbers from 1 to 10:", squares)

# Example 2: Create a list of even numbers from 1 to 20
even_numbers = [x for x in range(1, 21) if x % 2 == 0]
print("Even numbers from 1 to 20:", even_numbers)

# Example 3: Create a list of strings with their lengths
words = ["hello", "world", "python", "is", "awesome"]
word_lengths = [len(word) for word in words]
print("Length of each word:", word_lengths)

#Lambda Functions and map(), filter(), reduce()

# Lambda function to add 5 to a number
add_five = lambda x: x + 5
print(f"Add 5 to 10: {add_five(10)}")

# Using map() with a lambda function to square each number in a list
numbers = [1, 2, 3, 4, 5]
squared_numbers = list(map(lambda x: x**2, numbers))
print("Squared numbers:", squared_numbers)

# Using filter() to get even numbers from a list
even_numbers = list(filter(lambda x: x % 2 == 0, numbers))
print("Even numbers:", even_numbers)

# Using reduce() to calculate the product of all numbers in a list
from functools import reduce
product = reduce(lambda x, y: x * y, numbers)
print("Product of all numbers:", product)

#Working with Dates and Time

import datetime

# Get the current date and time
current_time = datetime.datetime.now()
print("Current date and time:", current_time)

# Create a specific date and time
specific_date = datetime.datetime(2024, 12, 4, 15, 30)
print(f"Specific date and time: {specific_date}")

# Format the date and time as a string
formatted_date = current_time.strftime("%Y-%m-%d %H:%M:%S")
print(f"Formatted current date and time: {formatted_date}")

# Parse a date from a string
date_str = "2024-12-04 15:30:00"
parsed_date = datetime.datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
print(f"Parsed date from string: {parsed_date}")

#Advanced Data Structures - Sets and Tuples

# Sets: Unordered collections of unique elements
my_set = {1, 2, 3, 4, 5}
print("Original set:", my_set)

# Adding an element to a set
my_set.add(6)
print("Set after adding 6:", my_set)

# Removing an element from a set
my_set.remove(3)
print("Set after removing 3:", my_set)

# Check if an element is in the set
if 2 in my_set:
    print("2 is in the set.")
else:
    print("2 is not in the set.")

# Tuples: Immutable sequences
my_tuple = (1, 2, 3, 4, 5)
print("Original tuple:", my_tuple)

# Accessing elements in a tuple
print("First element of the tuple:", my_tuple[0])

# Slicing a tuple
print("Sliced tuple (2nd to 4th elements):", my_tuple[1:4])

#Regular Expressions

import re

# Define a string to search within
text = "The year 2024 is a leap year, and 2025 will not be."

# Find all digits in the string
digits = re.findall(r'\d+', text)
print("All digits in the text:", digits)

# Search for the word 'year' (case insensitive)
match = re.search(r'year', text, re.IGNORECASE)
if match:
    print(f"Found '{match.group()}' at position {match.start()}-{match.end()}")

# Replace all occurrences of 'year' with 'month'
updated_text = re.sub(r'year', 'month', text, flags=re.IGNORECASE)
print("Updated text:", updated_text)

# Split text into words
words = re.split(r'\s+', text)
print("Words in the text:", words)

#Working with JSON

import json

# A dictionary to be converted to JSON
person = {
    "name": "Alice",
    "age": 25,
    "city": "New York",
    "is_student": False
}

# Convert the dictionary to a JSON string
json_string = json.dumps(person)
print("JSON string:", json_string)

# Convert the JSON string back to a dictionary
person_dict = json.loads(json_string)
print("Converted back to dictionary:", person_dict)

# Write JSON data to a file
with open("person.json", "w") as json_file:
    json.dump(person, json_file)

# Read JSON data from a file
with open("person.json", "r") as json_file:
    data = json.load(json_file)
    print("Data read from 'person.json':", data)

#Working with External Libraries - 'requests'

import requests

# Making a GET request to an API
url = "https://jsonplaceholder.typicode.com/posts/1"
response = requests.get(url)

# Check if the request was successful (status code 200)
if response.status_code == 200:
    print("API response:", response.json())
else:
    print(f"Failed to fetch data. Status code: {response.status_code}")

# Making a POST request
data = {"title": "foo", "body": "bar", "userId": 1}
post_response = requests.post("https://jsonplaceholder.typicode.com/posts", json=data)

# Print the response from the POST request
if post_response.status_code == 201:
    print("Data successfully posted:", post_response.json())
else:
    print("Failed to post data.")

#Data Visualization with matplotlib

import matplotlib.pyplot as plt
import numpy as np

# Example 1: Plotting a basic line graph
x = np.linspace(0, 10, 100)
y = np.sin(x)

plt.plot(x, y, label='sin(x)')
plt.title('Sine Wave')
plt.xlabel('x')
plt.ylabel('sin(x)')
plt.legend()
plt.grid(True)
plt.show()

# Example 2: Bar chart for categorical data
categories = ['A', 'B', 'C', 'D', 'E']
values = [10, 20, 15, 25, 30]

plt.bar(categories, values, color='skyblue')
plt.title('Bar Chart Example')
plt.xlabel('Category')
plt.ylabel('Value')
plt.show()

# Example 3: Histogram
data = np.random.randn(1000)  # Random data generated from a normal distribution
plt.hist(data, bins=30, color='green', edgecolor='black')
plt.title('Histogram of Random Data')
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.show()

#Working with Pandas - Data Frames

import pandas as pd

# Create a DataFrame from a dictionary
data = {
    "Name": ["Alice", "Bob", "Charlie", "David"],
    "Age": [25, 30, 35, 40],
    "City": ["New York", "Los Angeles", "Chicago", "Houston"]
}

df = pd.DataFrame(data)

# Display the first few rows of the DataFrame
print("DataFrame:")
print(df)

# Access a specific column
print("\nAge column:")
print(df["Age"])

# Filter rows where Age > 30
filtered_df = df[df["Age"] > 30]
print("\nFiltered DataFrame (Age > 30):")
print(filtered_df)

# Add a new column
df["Salary"] = [55000, 62000, 70000, 75000]
print("\nDataFrame with new Salary column:")
print(df)

# Calculate the average salary
average_salary = df["Salary"].mean()
print(f"\nAverage salary: ${average_salary:.2f}")

#Working with SQLite

import sqlite3

# Connect to a database (or create it if it doesn't exist)
conn = sqlite3.connect('example.db')

# Create a cursor object to interact with the database
cursor = conn.cursor()

# Create a table
cursor.execute('''
CREATE TABLE IF NOT EXISTS employees (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    age INTEGER,
    salary REAL
)
''')

# Insert data into the table
cursor.execute("INSERT INTO employees (name, age, salary) VALUES ('Alice', 25, 55000)")
cursor.execute("INSERT INTO employees (name, age, salary) VALUES ('Bob', 30, 62000)")

# Commit the changes
conn.commit()

# Query the data
cursor.execute("SELECT * FROM employees")
rows = cursor.fetchall()

# Display the data
print("\nEmployees data:")
for row in rows:
    print(row)

# Close the connection
conn.close()

#Working with Multithreading

import threading
import time

# Define a simple function that will run in a thread
def print_numbers():
    for i in range(5):
        print(i)
        time.sleep(1)  # Simulate a time-consuming task

# Create two threads
thread1 = threading.Thread(target=print_numbers)
thread2 = threading.Thread(target=print_numbers)

# Start the threads
thread1.start()
thread2.start()

# Wait for both threads to finish
thread1.join()
thread2.join()

print("Both threads have finished.")